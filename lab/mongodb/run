#!/bin/bash
kind/create

kubectl create namespace wasp

kubectl apply \
  --namespace wasp \
  --filename - <<EOF
---
apiVersion: v1
kind: Secret
metadata:
  name: mongoshell
type: Opaque
stringData:
  MONGODB_HOST:          ${MONGODB_HOST}
  MONGODB_DATABASE_NAME: ${MONGODB_DATABASE_NAME}
  MONGODB_USERNAME:      ${MONGODB_USERNAME}
  MONGODB_PASSWORD:      ${MONGODB_PASSWORD}
EOF

# Define Node Name
export NODE_NAME="${NODE_NAME-kind-control-plane}"

# Create POD
envsubst < "deploy/pod.yaml" | \
kubectl apply \
  --namespace wasp \
  --filename - && \
kubectl wait pod mongoshell \
  --for condition=Ready \
  --timeout 120s \
  --namespace wasp

# mongodb shell container
kubectl exec mongoshell \
  --namespace wasp \
  --container "mongoshell" \
  -- /opt/scripts/entrypoint \
    --command 'printjson(db.accounts.find( { "account_id": 702610 } ))' \
    --debug 1

# shell
kubectl exec mongoshell \
  --namespace wasp \
  --container "mongoshell" \
  --stdin \
  --tty -- /bin/bash

/opt/scripts/entrypoint \
  --command 'printjson(db.accounts.find( { "account_id": 702610 } ))' \
  --debug 1

# nsenter container
kubectl exec mongoshell \
  --namespace wasp \
  --container "nsenter" \
  --stdin \
  --tty -- /bin/bash

tcpdump --version || (apt-get update && apt-get install tcpdump --yes)

# https://www.mongodb.com/docs/atlas/troubleshoot-connection/?_ga=2.88583570.886434208.1671014563-1204875619.1663846224&_gac=1.23842760.1670837515.CjwKCAiAv9ucBhBXEiwA6N8nYJEC8rt1rRTloYPfRPgGEW5Woff9lcdcYaFsazXRo3rtHg2duevGdxoCwqcQAvD_BwE#connecting-to-a-database-deployment
# - Atlas database deployments operate on port 27017. You must be able to reach this port to connect to your database deployments. Additionally, ensure that the appropriate ports are open for the following:
# - For sharded clusters, grant access to port 27016.
# - For BI Connector, grant access to port 27015.

# commands
tcpdump -D
tcpdump --interface any -nn -vvv
tcpdump --interface any -w network.pcap
tcpdump --interface eth0 -w network.pcap
tcpdump --interface any dst port 27016 or dst port 27017 -w network.pcap

# AKS Node Debug
# https://learn.microsoft.com/en-us/azure/aks/node-access#create-an-interactive-shell-connection-to-a-linux-node
kubectl debug node/${NODE_NAME?} \
  -it \
  --image=mcr.microsoft.com/dotnet/runtime-deps:6.0

chroot /host

# Delete Debug PODs
kubectl get pods \
| grep '^node-debugger-' \
| while read LINE; do
  POD_NAME="$(awk '{ print $1 }')"
  kubectl delete pod ${POD_NAME?} --wait=false
done

# copy file to localhost (stop tcpdump before run this)
kubectl --namespace wasp cp --container nsenter mongoshell:'/data/network.pcap' network.pcap

kubectl cp node-debugger-aks-userpool1-33137823-vmss000027-5l45p:'/host/network.pcap' network.pcap

# read
tcpdump -r network.pcap

# wireshark (select yes to run as non super user)
sudo apt update
sudo apt install wireshark
sudo usermod -aG wireshark $(whoami)
# sudo reboot

# DNS Lookup with dig
dig ${MONGODB_HOST?} SRV

# DNS Lookup with dig
nslookup -debug -type=SRV _mongodb._tcp.${MONGODB_HOST?} \
| grep "^_mongodb._tcp" \
| awk '{ print $7 }' \
| (
    while read -r SERVER_NAME; do
      SERVER_IP_ADDRESS=$(dig +short ${SERVER_NAME} | tail -1)
      echo "${SERVER_NAME} ${SERVER_IP_ADDRESS}"
    done
)

ac-d1qhdi7-shard-00-02.qq6tuw6.mongodb.net. 52.67.169.5
ac-d1qhdi7-shard-00-00.qq6tuw6.mongodb.net. 54.233.186.89
ac-d1qhdi7-shard-00-01.qq6tuw6.mongodb.net. 18.230.161.136

tcpdump -r network.pcap | egrep "54.233.186.89|18.230.161.136|52.67.169.5"

# mtr combines the functionality of the traceroute and ping programs in a single network diagnostic tool
mtr --report --tcp --report-cycles 50 ac-d1qhdi7-shard-00-00.qq6tuw6.mongodb.net

# traceroute and ping
tcpping -x 5 ac-d1qhdi7-shard-00-00.qq6tuw6.mongodb.net 27017

# SRV Lookup DNS Entries
pip3 install srvlookup

# python3 mongodb_srv_records.py cluster0.qq6tuw6.mongodb.net
python3 mongodb_srv_records.py ${MONGODB_HOST?}
